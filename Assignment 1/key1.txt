Name: Frank Xing
ID: 905-164-685
Lab Section 7
Assignment 1

Exercise 1.1

1. emacs SP exer1.html Enter 

2. C-s HTML Enter

3. C-s scavenger Enter M-b

4. C-s self-referential Enter M-b M-b

5. C-s arrow Enter M-b

6. C-e

7. C-a

8. I have done the exercises without holding down the arrow keys too many times. There is a way to do it using the commands available in Emacs. This involves using the search command as well as using some special moving commands.  

9. No, I didn't move the cursor using the arrow keys. This is because that with the search command as well as special moving commands (like move to the beginning of line, end of link, back a word etc), I never had to use the arrow keys to navigate the text.

10. C-x C-c 

Exercise 1.2

1. emacs SP exer2.html Enter

2. C-s <!-- Enter C-a C-k

3. C-s DELETE Enter C-a C-k

4. C-s <!-- Enter C-a M-k C-k C-k

5. C-s <!-- Enter M-b M-f C-u 7 C-d
   C-s <!-- Enter C-a C-u 4 C-k
   C-s <!-- Enter C-a C-k 
   C-x C-c y 

Exercise 1.3

1. emacs SP exer3.html Enter

2. C-s Assignment SP 1 Enter C-b C-d 42 
   C-s Assignment SP 1 Enter C-b C-d 42

3. M-< C-s UTF-8 Enter M-b M-b C-f M-d C-d C-d US-ASCII

4. C-M-s [^[:ascii:]] Enter C-a C-k

5. C-s </ol> Enter C-n C-a Enter

6. C-x C-c y

Exercise 1.4

1. cat SP exer2.html SP exer2.diff SP >exer4.html Enter

2. emacs SP exer4.html Enter

3. M-> M-{ C-f C-k C-y C-r </html> C-r Enter C-n C-y 

4. M-> C-u 3 M-{ C-n C-f C-u 4 C-k C-y C-r <p>should C-r Enter C-n C-y C-p C-d C-p C-d C-p C-d
   M-> C-u 3 M-{ C-u 4 M-f C-u 7 C-d C-y C-r nothing C-r Enter M-f C-y
   M-> C-u 6 M-{ C-f C-u 3 C-k C-y C-r submit C-r C-r C-r C-r C-n C-n C-y Backspace C-a C-d C-p C-d
   M-> C-u 9 M-{ C-f C-k C-y C-r </h2> C-r C-r C-r C-n C-n C-y
   M-> C-u 13 M-{ C-f C-k C-y C-r </h2> C-r C-r C-r C-n C-n C-y

5. M-> C-u 15 M-{ C-n C-@ M-> C-w

6. C-y

7. M-> C-u 15 M-{ C-n <!-- C-s --> Enter C-u 3 C-b C-k 
   C-s --> Enter C-u 3 C-b C-k C-s --> Enter C-u 3 C-b C-k
   C-s --> Enter C-u 4 C-d
   C-s --> Enter C-s C-a C-k C-s --> Enter C-u 3 C-b C-k M-> -->

8. M-<
   M-x replace-string Enter <ol> Enter <oL> Enter
   From this, we see there are seven occurrences.

9. diff SP -u SP exer1.html SP exer4.html SP > exer4.diff

Exercise 1.5
1. C-x d ~ Enter
   M-x make-directory Enter ~/junk Enter

2. M-x find-file Enter ~/junk/hello.c Enter
   
3. M-x compile Enter gcc SP hello.c SP -o SP hello Enter y
 
4. M-! ./hello Enter C-x b *Shell Command Output* Enter C-a C-k C-y C-x b hello-out Enter C-y

5. C-@ M-< M-x fine-file Enter ~/Desktop/key1.txt Enter M-> SP SP SP C-y
   EOF on input  

Exercise 1.6

1. C-x b *scratch* Enter

2. (random SP "905-164-685") C-j 
   Result: 356593354445859342

3. (setq SP x SP (random)) C-j
   x: -186040061588678106
   (setq SP y SP (random)) C-j
   y: -1054228671787406171

4. (* SP x SP y) C-j
   The result is an overflow and is mathematically incorrect considering the two variables are both negative and the result should be positive.
   Product: -1243199824757808514

5. M-: (* SP x SP y) Enter
   This result includes the original value as well as hexadecimal and octadecimal numbers.

6. C-h f random Enter
   It is not truly random because they are generated by an algorithm. They only cover a certain number range due to factors like memory size instead from -infinity to infinity. Additionally, it would also generate the same "random" number for x and y if I run the command again within the same window.

7. The product is mathematically incorrect almost all the time.
   We assume there are n positive integers:
      If we let a number x = 2,
      there would be 1/2 values to cause overflow.
      If x = 3, there would be 2/3 values that overflow.
      If x = 4, there would be 3/4 values that overflow.
      x being a singluar value has a 1/n chance of occuring.
   The total possibility is approximately (1/n)(1/2 + 2/3 + ... n-1/n).
   Assume we have 32 bits of representation, then there are 2^32 possible values of n. Since n is large, this value would approach 1 and the product is pretty much incorrect all the time.
